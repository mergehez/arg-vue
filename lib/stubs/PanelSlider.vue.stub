<script setup lang="ts">

import AppLayoutPanel from "@/Components/AppLayoutPanel.vue";
import {api, TModelFormHelpers, usePage} from "@argvue/utils";
import {CenteredModal, openConfirmationDialog, showNotificationFromAxiosError, TextInput} from "@argvue/Components";
import {TSlider, TSliderItem} from "@/Types/Models";
import {computed, ref} from "vue";
import {__} from "@/Helpers/inertia_helpers";
import {vAutoAnimate} from "@formkit/auto-animate";
import {IHead} from "@argvue/Components";
import PanelTable from "@/Components/PanelTable.vue";
import {router, Link, Head} from "@inertiajs/vue3";
import {createSliderForm, createSliderItemForm} from "@/Helpers/slider_helpers";
import SliderItemFormInline from "@/Parts/SliderItemFormInline.vue";

defineOptions({layout: AppLayoutPanel});

const page = usePage<{
    item: TSlider,
}>()
const item = computed(() => page.props.pageData.item)

const {form, submit: submitFn} = createSliderForm(() => item.value);

function submit() {
    console.log('submit')
    submitFn()
        .then(() => {
            router.reload()
        })
}

const quickEditForm = ref(undefined as TModelFormHelpers<TSliderItem> | undefined);
function addNew() {
    quickEditForm.value = createSliderItemForm(() => undefined, item.value);
}
// const toEdit = ref(undefined as TModelFormHelpers<TSliderItem> | undefined);
function edit(mi: TSliderItem) {
    quickEditForm.value = createSliderItemForm(() => mi, item.value);
}
function askToDelete(p: TSliderItem){
    openConfirmationDialog({
        message: `<b>${p.title}</b><br/>`  + __('delete_slider_confirm_message'),
        onConfirm: () => {
            api.delete(route('api.slider_items.destroy', p.id))
                .then(() => router.reload())
                .catch(showNotificationFromAxiosError)
        }
    })
}
</script>

<template>
    <div class="flex flex-col h-full overflow-y-auto">
        <IHead :title="item.id ? __('edit_slider') : __('add_new_slider')"/>
        <form @submit.prevent="() => submit" class="flex flex-col pb-10 gap-3" v-auto-animate>
            <div class="pt-2 flex justify-between gap-3 items-center px-3">
                <Link :href="route('panel.sliders')" class="btn btn-secondary py-px gap-1">
                    <span class="icon icon-[mdi--arrow-back] text-lg"></span>
                    <span class="py-1">{{ __('back_to_all_sliders') }}</span>
                </Link>
                <i class="flex-1"></i>
            </div>
            <div v-if="Object.keys(form.errors).length" class="alert alert-danger leading-tight px-3">
                <div v-for="(val, key) in form.errors" :key>
                    <b>{{ key }}</b>: {{ val }}
                </div>
            </div>

            <div class="flex gap-2 items-center px-3" v-auto-animate>
                <span class="text-sm">{{ __('name') }}</span>
                <TextInput
                    v-model="form.title"
                    label="Slug"
                    :disabled="form.errors.title"
                    required
                    class="flex-1"
                />
                <button @click="submit"
                        class="btn btn-success py-px gap-1"
                        :disabled="form.title == item.title"
                        :class="form.title != item.title ? 'opacity-100': '!opacity-30'">
                    <span class="icon icon-[mdi--content-save] text-lg"></span>
                    <span class="py-1">{{ __('save') }}</span>
                </button>
            </div>

            <PanelTable
                :title="__('slider_items')"
                route-group="slider_items"
                sequenced
                inline
                @addNew="addNew"
                @edit="edit"
                @askToDelete="askToDelete"
                :items="item.items">
                <template #head>
                    <div class="flex w-full mt-2 border-b pb-1 text-sm">
                        <span
                            class="text-left font-bold px-3 whitespace-nowrap flex items-center gap-1" style="width: 100px">
                            {{ __('image') }}
                        </span>
                        <span
                            class="text-left font-bold px-3 whitespace-nowrap flex items-center gap-1 mr-auto">
                            {{ __('title') }}
                        </span>
                        <span
                            class="text-left font-bold whitespace-nowrap flex items-center gap-1" style="width: 177px">
                            {{ __('last_modified') }}
                        </span>
                        <div class="text-left font-bold whitespace-nowrap" style="width: 135px">-</div>
                    </div>
                </template>

                <template #cols-start="{item} : {item: TSliderItem}">
                    <div class="p-1 aspect-video" style="width:100px">
                        <img :src="item.image_url" alt="..." class="w-full h-full object-fill border border-x2"/>
                    </div>
                </template>
                <template #form="{data, cancel}">
                    <CenteredModal
                        content-style="width: min(60vw, 500px)"
                    >
                        <SliderItemFormInline :data="data!" @close="cancel"/>
                    </CenteredModal>
                </template>
            </PanelTable>
        </form>

        <CenteredModal
            :show="!!quickEditForm"
            @update:show="quickEditForm = undefined"
            content-style="width: min(60vw, 500px)"
            content-class="bg-x3"
        >

            <header class="flex px-5 py-2">
                <h3 class="text-xl">{{ __('edit_slider_item') }}</h3>

                <button class="btn btn-secondary rounded-full p-1 ml-auto" @click="quickEditForm = undefined">
                    <span class="icon icon-[mdi--remove]"></span>
                </button>
            </header>

            <SliderItemFormInline v-if="quickEditForm" :data="quickEditForm" @close="quickEditForm = undefined"/>
        </CenteredModal>
    </div>
</template>